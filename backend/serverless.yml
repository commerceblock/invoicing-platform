service: cb-invoices

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-kms-secrets

provider:
  name: aws
  stage: prod001
  region: eu-west-2
  runtime: nodejs6.10
  memorySize: 256
  timeout: 5
  versionFunctions: true
  environment:
    CB_REGION: ${self:provider.region}
    CB_ENV_NAME: ${self:service}-${self:custom.stage}
    CB_STORAGE_ACCESS_KEY: ${self:custom.kmsSecrets.secrets.CB_STORAGE_ACCESS_KEY}
    CB_STORAGE_SECRET_KEY: ${self:custom.kmsSecrets.secrets.CB_STORAGE_SECRET_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:custom.stage}-*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}

custom:
  stage: ${opt:stage, self:provider.stage}
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  cors:
    allowOrigin: "*"
    allowHeaders: ["Content-Type", "X-Amz-Date", "Authorization", "X-Api-Key"]
  dynamodbThroughput:
    events:
      read: 50
      write: 10
    storage:
      read: 50
      write: 10
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false

functions:
  # storage service

  ### API functions
  storage-api-put:
    handler: lambda/storage-api-put.put
    events:
      - http:
          path: /v0.1/storage/{file_id}
          method: put
          cors: true

  storage-api-get:
    handler: lambda/storage-api-get.get
    events:
      - http:
          path: /v0.1/storage/{file_id}
          method: get
          cors: true

  graphql-api-v1:
    handler: lambda/graphql-api.post
    events:
    - http:
        path: /v0.1/graphql
        method: post
        cors: true

resources:
  Resources:
    WebsiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CB_ENV_NAME}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebsiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebsiteS3Bucket
                  - "/*"
    StorageBucket:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.CB_ENV_NAME}-storage
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, POST, PUT]
            AllowedOrigins: ["*"]
            ExposedHeaders: [Date]
            Id: FirstRule
            MaxAge: "3600"
    StorageDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-storage
        AttributeDefinitions:
          -
            AttributeName: file_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: file_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.storage.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.storage.write}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    EventsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-events
        AttributeDefinitions:
          -
            AttributeName: trader_id
            AttributeType: S
          -
            AttributeName: event_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: trader_id
            KeyType: HASH
          -
            AttributeName: event_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.events.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.events.write}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
